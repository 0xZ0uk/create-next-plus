import colors from 'picocolors';

function parseStack(stack) {
  const lines = stack.split("\n").splice(1).map(
    (l) => l.trim().replace("file://", "")
  );
  return lines;
}
function formatStack(stack) {
  return `
${parseStack(stack).map(
    (line) => `  ${line.replace(/^at ([\s\S]+) \((.+)\)/, (_, m1, m2) => colors.gray(`at ${m1} (${colors.cyan(m2)})`))}`
  ).join("\n")}`;
}
const NEWLINE_RE = /\r?\n/g;
function formatMessage(messages) {
  return messages.map((m) => {
    if (typeof (m == null ? void 0 : m.stack) === "string") {
      return [m.message, formatStack(m.stack)];
    }
    if (typeof m === "string") {
      return m.split(NEWLINE_RE);
    }
    return m;
  }).flat();
}
function createBadge(badgeType, bgColor) {
  const upperType = badgeType.toUpperCase();
  const bgColorFormatter = colors[bgColor];
  return colors.bold(colors.inverse(bgColorFormatter(` ${upperType} `)));
}
function createIcon(icon, iconColor) {
  const iconColorFormatter = colors[iconColor];
  return iconColorFormatter(icon);
}

export { createIcon as a, createBadge as c, formatMessage as f };
