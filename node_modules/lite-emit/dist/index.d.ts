type EventMap = Record<string | symbol, any[]>;
type Listener<A extends any[]> = (...args: A) => void | Promise<void>;
type _WildcardListener<EM extends EventMap, K extends keyof EM = keyof EM> = Listener<[K, ...EM[K]]>;
type WildcardListener<EM extends EventMap> = _WildcardListener<EM>;
type ListenerMap<EM extends EventMap> = Map<keyof EM, Set<Listener<EM[keyof EM]>>>;
interface LiteEmitOptions {
    errorHandler?: (msg: string) => void;
}
declare class LiteEmit<EM extends EventMap = EventMap> {
    #private;
    constructor(options?: LiteEmitOptions);
    on(event: "*", listener: WildcardListener<EM>): this;
    on<K extends keyof EM>(event: K, listener: Listener<EM[K]>): this;
    once(event: "*", listener: WildcardListener<EM>): this;
    once<K extends keyof EM>(event: K, listener: Listener<EM[K]>): this;
    emit<K extends keyof EM>(event: K, ...args: EM[K]): this;
    off(): this;
    off(event: "*", listener?: WildcardListener<EM>): this;
    off<K extends keyof EM>(event: K, listener?: Listener<EM[K]>): this;
}

export { EventMap, Listener, ListenerMap, LiteEmit, LiteEmitOptions, WildcardListener };
